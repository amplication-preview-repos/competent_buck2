datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Transaction {
  amount    Float?
  createdAt DateTime  @default(now())
  date      DateTime?
  id        String    @id @default(cuid())
  updatedAt DateTime  @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  venue     Venue?    @relation(fields: [venueId], references: [id])
  venueId   String?
}

model Badge {
  createdAt   DateTime @default(now())
  description String?
  icon        Json?
  id          String   @id @default(cuid())
  level       Int?
  name        String?
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  venue       Venue?   @relation(fields: [venueId], references: [id])
  venueId     String?
}

model Venue {
  badges       Badge[]
  createdAt    DateTime            @default(now())
  id           String              @id @default(cuid())
  location     String?
  name         String?
  transactions Transaction[]
  typeField    EnumVenueTypeField?
  updatedAt    DateTime            @updatedAt
}

model Leaderboard {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  score     Int?
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model User {
  badges       Badge[]
  createdAt    DateTime      @default(now())
  email        String?       @unique
  firstName    String?
  id           String        @id @default(cuid())
  lastName     String?
  leaderboards Leaderboard[]
  password     String
  roles        Json
  transactions Transaction[]
  updatedAt    DateTime      @updatedAt
  userFriends  UserFriend[]
  username     String        @unique
}

model UserFriend {
  createdAt DateTime @default(now())
  friend    String?
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

enum EnumVenueTypeField {
  Option1
}
