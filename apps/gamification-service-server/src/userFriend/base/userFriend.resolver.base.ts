/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserFriend } from "./UserFriend";
import { UserFriendCountArgs } from "./UserFriendCountArgs";
import { UserFriendFindManyArgs } from "./UserFriendFindManyArgs";
import { UserFriendFindUniqueArgs } from "./UserFriendFindUniqueArgs";
import { CreateUserFriendArgs } from "./CreateUserFriendArgs";
import { UpdateUserFriendArgs } from "./UpdateUserFriendArgs";
import { DeleteUserFriendArgs } from "./DeleteUserFriendArgs";
import { User } from "../../user/base/User";
import { UserFriendService } from "../userFriend.service";
@graphql.Resolver(() => UserFriend)
export class UserFriendResolverBase {
  constructor(protected readonly service: UserFriendService) {}

  async _userFriendsMeta(
    @graphql.Args() args: UserFriendCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserFriend])
  async userFriends(
    @graphql.Args() args: UserFriendFindManyArgs
  ): Promise<UserFriend[]> {
    return this.service.userFriends(args);
  }

  @graphql.Query(() => UserFriend, { nullable: true })
  async userFriend(
    @graphql.Args() args: UserFriendFindUniqueArgs
  ): Promise<UserFriend | null> {
    const result = await this.service.userFriend(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserFriend)
  async createUserFriend(
    @graphql.Args() args: CreateUserFriendArgs
  ): Promise<UserFriend> {
    return await this.service.createUserFriend({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserFriend)
  async updateUserFriend(
    @graphql.Args() args: UpdateUserFriendArgs
  ): Promise<UserFriend | null> {
    try {
      return await this.service.updateUserFriend({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserFriend)
  async deleteUserFriend(
    @graphql.Args() args: DeleteUserFriendArgs
  ): Promise<UserFriend | null> {
    try {
      return await this.service.deleteUserFriend(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: UserFriend): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
