/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Badge as PrismaBadge,
  User as PrismaUser,
  Venue as PrismaVenue,
} from "@prisma/client";

export class BadgeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BadgeCountArgs, "select">): Promise<number> {
    return this.prisma.badge.count(args);
  }

  async badges<T extends Prisma.BadgeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BadgeFindManyArgs>
  ): Promise<PrismaBadge[]> {
    return this.prisma.badge.findMany<Prisma.BadgeFindManyArgs>(args);
  }
  async badge<T extends Prisma.BadgeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BadgeFindUniqueArgs>
  ): Promise<PrismaBadge | null> {
    return this.prisma.badge.findUnique(args);
  }
  async createBadge<T extends Prisma.BadgeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BadgeCreateArgs>
  ): Promise<PrismaBadge> {
    return this.prisma.badge.create<T>(args);
  }
  async updateBadge<T extends Prisma.BadgeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BadgeUpdateArgs>
  ): Promise<PrismaBadge> {
    return this.prisma.badge.update<T>(args);
  }
  async deleteBadge<T extends Prisma.BadgeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BadgeDeleteArgs>
  ): Promise<PrismaBadge> {
    return this.prisma.badge.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.badge
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getVenue(parentId: string): Promise<PrismaVenue | null> {
    return this.prisma.badge
      .findUnique({
        where: { id: parentId },
      })
      .venue();
  }
}
